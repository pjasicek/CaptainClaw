#ifndef TEST_UTIL_H_
#define TEST_UTIL_H_

#include "../libwap/libwap.h"
#include <string.h>
#include <vector>
#include <functional>

RezDirectory* FindRezSubDirectory(RezDirectory* rezDirectory, char* searchedName)
{
    uint32_t i;
    RezDirectory* searchedDirectory = NULL;
    // Check for validity
    if (rezDirectory == NULL || rezDirectory->directoryContents == NULL)
    {
        return NULL;
    }
    // Find folder according to levelName
    for (i = 0; i < rezDirectory->directoryContents->rezDirectoriesCount; i++)
    {
        if (strcmp(searchedName, rezDirectory->directoryContents->rezDirectories[i]->name) == 0)
        {
            searchedDirectory = rezDirectory->directoryContents->rezDirectories[i];
            break;
        }
    }

    return searchedDirectory;
}

RezFile* FindRezFile(RezDirectory* rezDirectory, char* name, char* extension)
{
    uint32_t i;
    RezFile* searchedRezFile = NULL;
    // Check for validity
    if (rezDirectory == NULL || rezDirectory->directoryContents == NULL)
    {
        return NULL;
    }

    // Find folder according to levelName
    for (i = 0; i < rezDirectory->directoryContents->rezFilesCount; i++)
    {
        if ((strcmp(name, rezDirectory->directoryContents->rezFiles[i]->name) == 0) &&
            (strcmp(extension, rezDirectory->directoryContents->rezFiles[i]->extension) == 0))
        {
            searchedRezFile = rezDirectory->directoryContents->rezFiles[i];
            break;
        }
    }

    return searchedRezFile;
}

void GetAllRezFilesFromRezDirectory(std::vector<RezFile*>& rezFilesVector, RezDirectory* rezDirectory)
{
    if (rezDirectory->directoryContents == NULL)
    {
        return;
    }

    for (int i = 0; i < rezDirectory->directoryContents->rezFilesCount; i++)
    {
        rezFilesVector.push_back(rezDirectory->directoryContents->rezFiles[i]);
    }

    for (int i = 0; i < rezDirectory->directoryContents->rezDirectoriesCount; i++)
    {
        GetAllRezFilesFromRezDirectory(rezFilesVector, rezDirectory->directoryContents->rezDirectories[i]);
    }
}

std::vector<RezFile*> GetAllRezFilesFromRezArchive(RezArchive* rezArchive)
{
    std::vector<RezFile*> rezFilesVector;

    GetAllRezFilesFromRezDirectory(rezFilesVector, rezArchive->rootDirectory);

    return rezFilesVector;
}

// void (RezFile* rezFile)

void ForEachRezFileInRezDirectoryRecursive(RezDirectory* rezDirectory, std::function<void (RezFile*)> f)
{
    if (rezDirectory->directoryContents == NULL)
    {
        return;
    }

    for (int i = 0; i < rezDirectory->directoryContents->rezFilesCount; i++)
    {
        f(rezDirectory->directoryContents->rezFiles[i]);
    }

    for (int i = 0; i < rezDirectory->directoryContents->rezDirectoriesCount; i++)
    {
        ForEachRezFileInRezDirectoryRecursive(rezDirectory->directoryContents->rezDirectories[i], f);
    }
}

void ForEachRezFileInRezArchive(RezArchive* rezArchive, std::function<void(RezFile*)> f)
{
    if (f == NULL)
    {
        return;
    }

    ForEachRezFileInRezDirectoryRecursive(rezArchive->rootDirectory, f);
}

#define NOMINMAX
#include <Windows.h>

#define START_QUERY_PERFORMANCE_TIMER \
    LARGE_INTEGER StartingTime, EndingTime, ElapsedMicroseconds; \
    LARGE_INTEGER Frequency; \
    QueryPerformanceFrequency(&Frequency); \
    QueryPerformanceCounter(&StartingTime); \

#define END_QUERY_PERFORMANCE_TIMER \
    QueryPerformanceCounter(&EndingTime); \
    ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart; \
    ElapsedMicroseconds.QuadPart *= 1000000; \
    ElapsedMicroseconds.QuadPart /= Frequency.QuadPart; \
    std::cout << "Elapsed microseconds: " << ElapsedMicroseconds.QuadPart << std::endl; \

uint8_t test_palette[] =
{
    0x00, 0x00, 0x00, 0x13, 0x0C, 0x37, 0x0D, 0x0C, 0x4B, 0x09, 0x09, 0x58, 0x10, 0x1A, 0x5F, 0x16,
    0x22, 0x76, 0x17, 0x29, 0x91, 0x15, 0x30, 0xAD, 0x16, 0x3B, 0xC5, 0x0C, 0x50, 0xCF, 0x0C, 0x63,
    0xD8, 0x0C, 0x77, 0xDE, 0x0C, 0x8E, 0xE3, 0x0C, 0xA2, 0xE6, 0x3A, 0x39, 0x3D, 0x69, 0x6B, 0x6B,
    0xAA, 0xAC, 0xAC, 0x88, 0x89, 0x89, 0x55, 0x56, 0x55, 0x69, 0x16, 0x22, 0xF8, 0xB1, 0x6A, 0xED,
    0x8E, 0x3C, 0xD2, 0x67, 0x21, 0xAD, 0x46, 0x1B, 0x96, 0x35, 0x1D, 0x7D, 0x22, 0x1E, 0xE8, 0xE6,
    0xB8, 0xDF, 0xD8, 0x90, 0xD3, 0xC8, 0x8F, 0xC7, 0xBC, 0x84, 0xAA, 0x97, 0x6A, 0x81, 0x66, 0x4E,
    0x6C, 0x44, 0x3C, 0xD6, 0x9C, 0x4E, 0xB5, 0x75, 0x22, 0x97, 0x54, 0x12, 0x69, 0x29, 0x15, 0xC2,
    0x9D, 0xA5, 0x88, 0x09, 0x2C, 0x5A, 0xAD, 0x5B, 0xFF, 0x5D, 0x09, 0xEB, 0xEA, 0x39, 0x99, 0x7A,
    0x3F, 0x6D, 0x51, 0x24, 0x55, 0x39, 0x13, 0x27, 0x05, 0x08, 0xFF, 0x9F, 0x92, 0xF6, 0x67, 0x60,
    0xF4, 0x41, 0x3A, 0xC7, 0x27, 0x23, 0x8D, 0x15, 0x13, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x5B, 0x5F, 0xFF, 0x97, 0x9C, 0xFF, 0xC8, 0xCD,
    0xFF, 0xF6, 0xF9, 0xFF, 0xFC, 0xF4, 0xD3, 0xD7, 0xD7, 0xD7, 0xEF, 0xEF, 0xEF, 0x1D, 0xA0, 0xAD,
    0x48, 0xF6, 0xFC, 0xD5, 0xFF, 0xFF, 0x4A, 0x05, 0x1E, 0x78, 0x0D, 0x2D, 0xB8, 0x89, 0x48, 0xCB,
    0xB4, 0x4C, 0xFB, 0xED, 0x84, 0xFD, 0xDA, 0xEF, 0xF7, 0xA6, 0xDF, 0xC8, 0x46, 0xC0, 0x7D, 0x13,
    0x7F, 0x4C, 0x0B, 0x4E, 0x0F, 0x3A, 0x09, 0x1D, 0x55, 0x0B, 0x53, 0x89, 0x0D, 0xBE, 0xC8, 0x0F,
    0x05, 0x08, 0x82, 0x05, 0x0B, 0xC0, 0x81, 0x05, 0x05, 0xD5, 0x05, 0x05, 0xFD, 0xFD, 0xAE, 0xF8,
    0xF2, 0x83, 0xFC, 0xED, 0x6B, 0xFC, 0xE6, 0x58, 0xF9, 0xDB, 0x42, 0xF9, 0xCA, 0x24, 0xF6, 0x8D,
    0x06, 0xF0, 0x58, 0x02, 0xC0, 0x1E, 0x00, 0x95, 0x10, 0x00, 0xFF, 0xC6, 0xC6, 0xFF, 0xEF, 0xEF,
    0x6F, 0xD2, 0xFF, 0x86, 0xDA, 0xFF, 0x9D, 0xE2, 0xFF, 0x05, 0xA6, 0x05, 0xFF, 0xEE, 0x0F, 0x2C,
    0xF0, 0x32, 0xB9, 0xFF, 0xCF, 0x07, 0xE3, 0xFF, 0x06, 0xBF, 0xFF, 0xF3, 0xC3, 0x4D, 0xF4, 0xD7,
    0x5C, 0xD7, 0xA8, 0x18, 0x86, 0xDD, 0x80, 0x59, 0xCA, 0x5A, 0x2F, 0xC6, 0x39, 0x25, 0x98, 0x2E,
    0xF5, 0xC2, 0xFF, 0xC7, 0x36, 0xEE, 0x9A, 0x11, 0xC5, 0x05, 0xFF, 0xA1, 0x9F, 0xF8, 0x95, 0xC4,
    0x65, 0xFF, 0xEC, 0x75, 0xFF, 0xF8, 0x9F, 0xFF, 0x12, 0x1A, 0x29, 0x18, 0x2D, 0x47, 0x30, 0x4C,
    0x76, 0x41, 0x70, 0x9B, 0x74, 0x9D, 0xA9, 0xBC, 0x08, 0x7D, 0x00, 0x00, 0x00, 0xA3, 0x74, 0x2A,
    0x9E, 0x61, 0x20, 0x9A, 0x53, 0x16, 0x90, 0x40, 0x0D, 0x6F, 0x31, 0x11, 0x5E, 0x1B, 0x0C, 0x16,
    0x22, 0x1A, 0x28, 0x38, 0x2F, 0x42, 0x51, 0x47, 0x79, 0x86, 0x7F, 0x18, 0x19, 0x19, 0xD4, 0x03,
    0xC8, 0xB8, 0x06, 0xAB, 0x9C, 0x0C, 0x83, 0x79, 0x05, 0x73, 0x68, 0x03, 0x65, 0x52, 0x00, 0x5B,
    0x9A, 0x9B, 0x9B, 0xAB, 0xAB, 0xAB, 0x47, 0x30, 0x13, 0x5D, 0x3C, 0x14, 0x71, 0x4B, 0x14, 0x69,
    0x42, 0x1D, 0x51, 0x32, 0x14, 0x3D, 0x25, 0x10, 0x28, 0x1C, 0x0D, 0x38, 0x2E, 0x2E, 0x61, 0x53,
    0x48, 0x88, 0x79, 0x60, 0xD6, 0xA5, 0xAA, 0xBC, 0x74, 0x83, 0x92, 0x62, 0x80, 0x5E, 0x3E, 0x71,
    0x03, 0x21, 0x36, 0x03, 0x38, 0x59, 0x03, 0x4F, 0x74, 0x03, 0x59, 0x7F, 0x03, 0x66, 0x8F, 0x03,
    0x75, 0xA3, 0x03, 0x85, 0xBB, 0x03, 0x94, 0xC3, 0x00, 0x27, 0x4E, 0x11, 0x11, 0x11, 0x09, 0x09,
    0x09, 0x03, 0x03, 0x03, 0x57, 0xA9, 0xC1, 0x3F, 0x88, 0xA8, 0x24, 0x56, 0x79, 0x18, 0x39, 0x54,
    0x11, 0x25, 0x37, 0x0B, 0x1C, 0x2C, 0x09, 0x16, 0x23, 0x07, 0x11, 0x1B, 0x05, 0x0D, 0x14, 0x03,
    0x0A, 0x11, 0x04, 0x09, 0x0F, 0x03, 0x07, 0x0B, 0x02, 0x05, 0x08, 0x02, 0x04, 0x07, 0x00, 0x01,
    0x02, 0xB4, 0x1C, 0x08, 0x8D, 0x18, 0x00, 0x66, 0x0F, 0x08, 0x54, 0x0A, 0x00, 0x39, 0x12, 0x00,
    0x42, 0x08, 0x00, 0x35, 0x08, 0x00, 0x26, 0x0A, 0x08, 0x24, 0x08, 0x00, 0x33, 0x00, 0x00, 0x29,
    0x00, 0x00, 0x16, 0x08, 0x00, 0x21, 0x00, 0x00, 0x18, 0x00, 0x00, 0x08, 0x08, 0x00, 0x10, 0x00,
    0x00, 0x08, 0x00, 0x00, 0xFF, 0x31, 0x0C, 0x22, 0x3A, 0x3A, 0x3F, 0x63, 0x63, 0x54, 0x8B, 0x8C,
    0x88, 0xC2, 0xC2, 0x76, 0x37, 0x37, 0x46, 0x23, 0x23, 0x2C, 0x19, 0x19, 0x1F, 0x13, 0x13, 0x10,
    0x0A, 0x0A, 0x9E, 0x97, 0x4D, 0x83, 0x78, 0x3A, 0x6A, 0x64, 0x33, 0x68, 0x5F, 0x26, 0x58, 0x50,
    0x26, 0x44, 0x43, 0x22, 0x44, 0x40, 0x17, 0x32, 0x30, 0x15, 0x28, 0x2A, 0x10, 0x20, 0x21, 0x0D,
    0x18, 0x18, 0x08, 0x0E, 0x18, 0x06, 0x11, 0x10, 0x08, 0x10, 0x10, 0x00, 0x08, 0x09, 0x00, 0x08,
    0x00, 0x00, 0x8E, 0x6C, 0x3B, 0xB3, 0xB8, 0xAA, 0x97, 0xA1, 0x86, 0x73, 0x84, 0x56, 0x63, 0x79,
    0x42, 0x58, 0x6E, 0x36, 0x4B, 0x60, 0x2C, 0x3D, 0x4C, 0x1B, 0x2E, 0x36, 0x13, 0x7C, 0x93, 0x40,
    0x55, 0x68, 0x27, 0x40, 0x4F, 0x1B, 0x32, 0x40, 0x13, 0x28, 0x35, 0x0F, 0x1F, 0x2B, 0x0A, 0x17,
    0x20, 0x07, 0x0F, 0x15, 0x04, 0xA0, 0xBA, 0x5B, 0x33, 0x89, 0xD1, 0x21, 0x71, 0xB5, 0x14, 0x62,
    0xA4, 0x0C, 0x56, 0x93, 0x00, 0x53, 0x98, 0x00, 0x44, 0x86, 0x00, 0x38, 0x6E, 0xFF, 0xFF, 0xFF,
};


#endif //TEST_UTIL_H_